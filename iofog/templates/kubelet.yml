apiVersion: v1
kind: ServiceAccount
metadata:
  name: svacc-iofog-kubelet
  namespace: {{ .Release.Namespace | default .Values.defaultNamespace }}
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: crb-iofog-kubelet-{{ .Release.Namespace | default .Values.defaultNamespace }}
subjects:
  - kind: ServiceAccount
    name: svacc-iofog-kubelet
    namespace: {{ .Release.Namespace | default .Values.defaultNamespace }}
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
data:
  login-token: ""
kind: Secret
metadata:
  name: login-token
type: Opaque
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubelet
  namespace: {{ .Release.Namespace | default .Values.defaultNamespace }}
  labels:
    name: kubelet
spec:
  replicas: {{ .Values.kubelet.replicas }}
  selector:
    matchLabels:
      name: kubelet
  template:
    metadata:
      labels:
        name: kubelet
      {{- if .Values.kubelet.podAnnotations }}
      annotations:
      {{- range $key, $value := .Values.kubelet.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      {{- end }}
    spec:
      serviceAccountName: svacc-iofog-kubelet
      volumes:
        - name: conf
          emptyDir: {}
      initContainers:
        - name: wait-for-controller
          image: fmiguelez/alpine-curl-jq:latest
          env:
            - name: CONTROLLER_URL
              value: "http://{{ .Values.controller.host }}:{{ .Values.controller.port }}/api/v3"
          command: ['sh', '-c']
          args:
            - |
              until [[ "$(curl ${CONTROLLER_URL}/status 2>/dev/null | jq -r ".status")" == "online" ]]; do
                echo "Waiting for Controller at ${CONTROLLER_URL}..."
                sleep 2
              done
        - name: user-login
          image: fmiguelez/alpine-curl-jq:latest
          volumeMounts:
            - mountPath: /conf
              name: conf
          env:
            - name: CONTROLLER_URL
              value: "http://{{ .Values.controller.host }}:{{ .Values.controller.port }}/api/v3"
          command: ['sh', '-c']
          args:
            - |
              until [[ -n "${TOKEN}" && "${TOKEN}" != "null" ]]; do
                TOKEN="$(curl -X POST http://controller:51121/api/v3/user/login \
                             -H 'Content-Type: application/json' \
                             -d '{"email":"user@domain.com","password":"#Bugs4Fun"}' 2>/dev/null \
                             | jq -r '.accessToken')"
                sleep 2
              done
              echo -n "${TOKEN}" > /conf/login-token
        - name: login-to-secret
          image: bitnami/kubectl:latest
          volumeMounts:
            - mountPath: /conf
              name: conf
          command: ['bash', '-c']
          args:
            - |
              kubectl create secret generic login-token --from-file=/conf/login-token --dry-run -o yaml | kubectl apply -f -
      containers:
      - name: kubelet
        image: {{ .Values.kubelet.image }}
        imagePullPolicy: {{ .Values.kubelet.imagePullPolicy }}
        env:
          - name: LOGIN_TOKEN
            valueFrom:
              secretKeyRef:
                name: login-token
                key: login-token
        args:
        - "--namespace"
        - {{ .Release.Namespace | default .Values.defaultNamespace }}
        - "--iofog-token"
        - $(LOGIN_TOKEN)
        - "--iofog-url"
        - "http://{{ .Values.controller.host }}:{{ .Values.controller.port }}"
