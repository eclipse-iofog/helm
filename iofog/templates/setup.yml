apiVersion: batch/v1
kind: Job
metadata:
  name: setup
  namespace: {{ .Release.Namespace | default .Values.defaultNamespace }}
spec:
  template:
    metadata:
      {{- if .Values.controller.podAnnotations }}
      annotations:
      {{- range $key, $value := .Values.controller.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      {{- end }}
    spec:
      initContainers:
      - name: wait-for-controller
        image: fmiguelez/alpine-curl-jq:latest
        env:
          - name: CONTROLLER_URL
            value: "http://{{ .Values.controller.host }}:{{ .Values.controller.port }}/api/v3"
        command:
          - /bin/sh
          - -c
          - |
            until [[ "$(curl ${CONTROLLER_URL}/status 2>/dev/null | jq -r ".status")" == "online" ]]; do
              echo "Waiting for Controller at ${CONTROLLER_URL}..."
              sleep 2
            done
      containers:
      - name: create-user
        image: fmiguelez/alpine-curl-jq:latest
        env:
          - name: CONTROLLER_URL
            value: "http://{{ .Values.controller.host }}:{{ .Values.controller.port }}/api/v3"
        command:
          - /bin/sh
          - -c
          - |
            echo -n "Creating user John Doe... "
            RET=$(curl --request POST --url "${CONTROLLER_URL}/user/signup" \
                --header 'Content-Type: application/json' \
                --data '{"email":"user@domain.com","firstName":"John","lastName":"Doe","password":"#Bugs4Fun"}' \
                2>/dev/null)
            RET_UID=$(echo $RET | jq -r '.userId')
            if [[ "${RET_UID}" != "null" ]]; then
              echo "${RET_UID}"
            else
              echo "Error!"
              echo "${RET}"
              exit 1
            fi
      restartPolicy: Never
  backoffLimit: 1
