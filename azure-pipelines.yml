trigger:
  tags:
    include:
      - v*
  branches:
    include:
      - master
      - develop
pr:
  - master
  - develop

# Setup Kubernetes service connection for Azure pipelines:
# https://cloud.google.com/solutions/creating-cicd-pipeline-vsts-kubernetes-engine#setting_up_the_development_and_production_environments

jobs:
  - job: Helm
    variables:
      - group: pipelines
      - name: commit
        value: $(Build.SourceVersion)
      - name: branch
        value: $(Build.SourceBranch)
      - name: kubernetesNamespace
        value: 'iofog-helm-ci-$(Build.BuildId)'
      - name: helmReleaseName
        value: 'iofog-helm-ci-$(Build.BuildId)'

    pool:
      vmImage: 'Ubuntu-16.04'

    steps:
      - task: HelmInstaller@1
        displayName: Helm installer
        inputs: 
          helmVersionToInstall: 3.0.2

      - task: Kubernetes@1
        displayName: 'Create Kubernetes namespace'
        condition: always()
        inputs:
          connectionType: Kubernetes Service Connection
          kubernetesServiceEndpoint: $(kubernetesServiceConnection)
          command: create
          arguments: ns $(kubernetesNamespace)

      - task: HelmDeploy@0
        displayName: 'Helm install ioFog'
        timeoutInMinutes: 10
        inputs:
          connectionType: Kubernetes Service Connection
          kubernetesServiceEndpoint: $(kubernetesServiceConnection)
          namespace: $(kubernetesNamespace)
          command: install
          chartType: FilePath
          chartPath: iofog
          releaseName: $(helmReleaseName)

      - task: Kubernetes@1
        displayName: 'Wait for Operator'
        inputs:
          connectionType: Kubernetes Service Connection
          kubernetesServiceEndpoint: $(kubernetesServiceConnection)
          command: wait
          arguments: --for=condition=ready pod -l name=iofog-operator --timeout 240s
          namespace: $(kubernetesNamespace)
      
      - task: DownloadSecureFile@1
        displayName: 'Download secure file'
        inputs:
          secureFile: 'azure-gcp.json'

      - bash: |
          keyFilePath="$(Agent.TempDirectory)/azure-gcp.json"
          if [[ -z $(which gcloud) ]]; then
            CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
            echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
            sudo apt-get update && sudo apt-get install -y google-cloud-sdk
          fi
          gcloud --quiet auth activate-service-account --key-file="${keyFilePath}"
          gcloud --quiet config set project $(gcp.project.name)
          gcloud --quiet container clusters get-credentials $(gcp.cluster.name) --region $(gcp.cluster.region)
        displayName: 'set up gke'
      
      - script: |
          NS=$(kubernetesNamespace)
          for SVC in router controller; do
            ITER=0
            EXT_IP=""
            while [[ ! "$EXT_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]] && [ $ITER -lt 30 ]; do
                sleep 10
                EXT_IP=$(kubectl get svc -n $NS | grep $SVC | awk '{print $4}')
                ITER=$((ITER+1))
            done
          done
        displayName: 'Wait for services'

      - task: Kubernetes@1
        displayName: 'Wait for Controller'
        inputs:
          connectionType: Kubernetes Service Connection
          kubernetesServiceEndpoint: $(kubernetesServiceConnection)
          command: wait
          arguments: --for=condition=ready pod -l name=controller --timeout 240s
          namespace: $(kubernetesNamespace)

      - task: Kubernetes@1
        displayName: 'Print all resources created'
        condition: always()
        inputs:
          connectionType: Kubernetes Service Connection
          kubernetesServiceEndpoint: $(kubernetesServiceConnection)
          command: get
          arguments: all
          namespace: $(kubernetesNamespace)
          outputFormat: yaml

      - task: HelmDeploy@0
        displayName: 'Helm test'
        inputs:
          connectionType: Kubernetes Service Connection
          kubernetesServiceEndpoint: $(kubernetesServiceConnection)
          command: test
          namespace: $(kubernetesNamespace)
          arguments: $(helmReleaseName)

      - task: Kubernetes@1
        displayName: 'Print test results'
        condition: always()
        inputs:
          connectionType: Kubernetes Service Connection
          kubernetesServiceEndpoint: $(kubernetesServiceConnection)
          command: logs
          arguments: test-runner
          namespace: $(kubernetesNamespace)

      - task: HelmDeploy@0
        displayName: 'Helm delete'
        condition: always()
        continueOnError: true
        inputs:
          connectionType: Kubernetes Service Connection
          kubernetesServiceEndpoint: $(kubernetesServiceConnection)
          command: delete
          namespace: $(kubernetesNamespace)
          arguments: '$(helmReleaseName)'

      - task: Kubernetes@1
        displayName: 'Delete Kubernetes namespace'
        condition: always()
        inputs:
          connectionType: Kubernetes Service Connection
          kubernetesServiceEndpoint: $(kubernetesServiceConnection)
          command: delete
          arguments: ns $(kubernetesNamespace)

      - script:
          helm package iofog --destination $(Build.ArtifactStagingDirectory)
        displayName: 'Package Helm'

      - bash: |
          ARCHIVE_BASENAME=$(basename $(find $(Build.ArtifactStagingDirectory) -name '*.tgz' | head -n1))
          echo "##vso[task.setvariable variable=ARCHIVE_BASENAME]${ARCHIVE_BASENAME}"
      
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'iofog-helm-chart'
          targetPath: $(Build.ArtifactStagingDirectory)/$(ARCHIVE_BASENAME)
